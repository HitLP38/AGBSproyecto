"""Add sexo and grado to results

Revision ID: facbfdba8bd8
Revises: 
Create Date: 2025-07-03 21:00:50.106068

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'facbfdba8bd8'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_exercise_records_id'), table_name='exercise_records')
    op.drop_table('exercise_records')
    op.drop_index(op.f('ix_performance_records_id'), table_name='performance_records')
    op.drop_table('performance_records')
    op.drop_index(op.f('ix_simulations_id'), table_name='simulations')
    op.drop_table('simulations')
    op.drop_index(op.f('ix_exercises_id'), table_name='exercises')
    op.drop_index(op.f('ix_exercises_name'), table_name='exercises')
    op.drop_table('exercises')
    op.drop_index(op.f('ix_users_clerk_user_id'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.add_column('results', sa.Column('sexo', sa.String(), nullable=True))
    op.add_column('results', sa.Column('grado', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('results', 'grado')
    op.drop_column('results', 'sexo')
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('clerk_user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('grade', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_clerk_user_id'), 'users', ['clerk_user_id'], unique=True)
    op.create_table('exercises',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('exercises_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='exercises_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_exercises_name'), 'exercises', ['name'], unique=False)
    op.create_index(op.f('ix_exercises_id'), 'exercises', ['id'], unique=False)
    op.create_table('simulations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('simulations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('total_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.clerk_user_id'], name='simulations_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='simulations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_simulations_id'), 'simulations', ['id'], unique=False)
    op.create_table('performance_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('exercise_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nota', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], name=op.f('performance_records_exercise_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('performance_records_pkey'))
    )
    op.create_index(op.f('ix_performance_records_id'), 'performance_records', ['id'], unique=False)
    op.create_table('exercise_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('simulation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exercise_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('raw_value', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['simulation_id'], ['simulations.id'], name=op.f('exercise_records_simulation_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('exercise_records_pkey'))
    )
    op.create_index(op.f('ix_exercise_records_id'), 'exercise_records', ['id'], unique=False)
    # ### end Alembic commands ###
